{"version":3,"sources":["util/waveContract.js","util/constants.js","util/wallet.js","serviceWorker.js","index.js","App.js"],"names":["getWaveContract","signer","ethers","providers","Web3Provider","window","ethereum","getSigner","Contract","WAVE_CONTRACT","abi","connectWallet","setCurrentAccount","Promise","resolve","reject","request","method","then","accounts","length","account","catch","err","Boolean","location","hostname","match","ReactDOM","render","useState","currAccount","totalWaves","setTotalWaves","waveTxn","setWaveTxn","pendingTxn","setPendingTxn","updateWaves","wavePortalContract","a","async","getTotalWaves","count","toNumber","useCallback","contract","useEffect","_","className","role","aria-label","size","onClick","wave","hash","wait","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"85RAIaA,EAAkB,WAC7B,IACMC,EADW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UAClCC,YAMxB,OALiB,IAAIL,IAAOM,SCPE,6CDS5BC,EAAcC,IACdT,IEVSU,EAAgB,SAACC,GAC5B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAAY,IAC/BT,EAAaD,OAAbC,SACHA,GACHS,EAAO,gBAGTT,EACGU,QAAQ,CAAEC,OAAQ,iBAClBC,MAAK,SAACC,GACL,GAAwB,IAApBA,EAASC,OAAc,CACzB,IAAMC,EAAUF,EAAS,GACzBP,EAAkBS,GAClBP,EAAQO,QAERN,EAAO,iCAGVO,OAAM,SAACC,GACNR,EAAO,sC,uBCPKS,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCAD,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACrBC,EADqB,KACRnB,EADQ,OAEQkB,mBAAS,IAFjB,mBAErBE,EAFqB,KAETC,EAFS,OAGEH,mBAAS,MAHX,mBAGrBI,EAHqB,KAGZC,EAHY,OAIQL,oBAAS,GAJjB,mBAIrBM,EAJqB,KAITC,EAJS,KAMtBC,EAAc,SAAOC,GAAP,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACED,EAAmBG,iBADrB,OACZC,EADY,OAElBV,EAAcU,EAAMC,YAFF,sCAKdF,EAAgBG,uBAAY,0BAAAL,EAAAC,OAAA,uDAC1BK,EAAW9C,IADe,WAAAwC,EAAA,MAE1BF,EAAYQ,IAFc,uCAG/B,IAmBH,OAJAC,qBAAU,WACRpC,EAAcC,GAAmBM,MAAK,SAAC8B,GAAD,OAAON,SAC5C,CAACA,IAGF,yBAAKO,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UACb,0BAAMC,KAAK,MAAMC,aAAW,QAA5B,gBAEQ,IAHV,6BAOCnB,GACC,yBAAKiB,UAAU,OAAf,gCAAmDjB,GAGpDE,GACC,yBAAKe,UAAU,oBACZb,GACC,oCACE,kBAAC,IAAD,CAAYgB,KAAM,KAClB,yBAAKH,UAAU,OAAf,0BAA6Cf,KAG/CE,GACA,yBAAKa,UAAU,OAAf,qBAAwCf,IAK9C,4BAAQe,UAAU,aAAaI,QA7CxB,4BAAAb,EAAAC,OAAA,uDACLK,EAAW9C,IADN,WAAAwC,EAAA,MAGWM,EAASQ,QAHpB,cAGLpB,EAHK,OAIXG,GAAc,GACdF,EAAWD,EAAQqB,MALR,WAAAf,EAAA,MAOLN,EAAQsB,QAPH,cAQXnB,GAAc,GARH,YAAAG,EAAA,MAULF,EAAYQ,IAVP,wCA6CP,eAIEf,GACA,4BAAQkB,UAAU,aAAaI,QAAS1C,GAAxC,sBDlEM,MAAS8C,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.b0a8ba0f.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport WAVE_CONTRACT from \"./wavePortal.json\";\nimport { CONTRACT_ADDRESS } from \"./constants\";\n\nexport const getWaveContract = () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const contract = new ethers.Contract(\n    CONTRACT_ADDRESS,\n    WAVE_CONTRACT.abi,\n    signer\n  );\n  return contract;\n};\n","export const CONTRACT_ADDRESS = \"0x9eeEDedF470139E0f5df395a4802e70467bc9F10\";\n","export const connectWallet = (setCurrentAccount) => {\n  return new Promise((resolve, reject) => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      reject(\"no metamask!\");\n    }\n\n    ethereum\n      .request({ method: \"eth_accounts\" })\n      .then((accounts) => {\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          setCurrentAccount(account);\n          resolve(account);\n        } else {\n          reject(\"no ethereum account access\");\n        }\n      })\n      .catch((err) => {\n        reject(\"error with ethereum request\");\n      });\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { getWaveContract } from \"./util/waveContract\";\nimport { connectWallet } from \"./util/wallet\";\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [currAccount, setCurrentAccount] = useState(\"\");\n  const [totalWaves, setTotalWaves] = useState(\"\");\n  const [waveTxn, setWaveTxn] = useState(null);\n  const [pendingTxn, setPendingTxn] = useState(false);\n\n  const updateWaves = async (wavePortalContract) => {\n    const count = await wavePortalContract.getTotalWaves();\n    setTotalWaves(count.toNumber());\n  };\n\n  const getTotalWaves = useCallback(async () => {\n    const contract = getWaveContract();\n    await updateWaves(contract);\n  }, []);\n\n  const wave = async () => {\n    const contract = getWaveContract();\n\n    const waveTxn = await contract.wave();\n    setPendingTxn(true);\n    setWaveTxn(waveTxn.hash);\n\n    await waveTxn.wait();\n    setPendingTxn(false);\n\n    await updateWaves(contract);\n  };\n\n  useEffect(() => {\n    connectWallet(setCurrentAccount).then((_) => getTotalWaves());\n  }, [getTotalWaves]);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"wave\">\n            👋\n          </span>{\" \"}\n          Basic wave smart contract\n        </div>\n\n        {totalWaves && (\n          <div className=\"bio\">Total waves on the contract: {totalWaves}</div>\n        )}\n\n        {waveTxn && (\n          <div className=\"loadingContainer\">\n            {pendingTxn && (\n              <>\n                <FadeLoader size={50} />\n                <div className=\"bio\">Pending transaction... {waveTxn}</div>\n              </>\n            )}\n            {!pendingTxn && (\n              <div className=\"bio\">Wave transaction: {waveTxn}</div>\n            )}\n          </div>\n        )}\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {!currAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}