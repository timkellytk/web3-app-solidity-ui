{"version":3,"sources":["util/waveContract.js","util/constants.js","util/wallet.js","serviceWorker.js","index.js","App.js"],"names":["getWaveContract","signer","ethers","providers","Web3Provider","window","ethereum","getSigner","Contract","WAVE_CONTRACT","abi","checkIfWalletIsConnected","setCurrentAccount","Promise","resolve","reject","request","method","then","accounts","length","account","catch","err","connectWallet","alert","console","log","Boolean","location","hostname","match","ReactDOM","render","useState","currAccount","totalWaves","setTotalWaves","waveTxn","setWaveTxn","waveMessages","setWaveMessages","pendingTxn","setPendingTxn","waveText","setWaveText","updateWavesMessages","contract","a","async","getAllWaves","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","getWaveMessages","useCallback","updateWaves","wavePortalContract","getTotalWaves","count","toNumber","useEffect","_","className","role","aria-label","size","onSubmit","event","preventDefault","hash","wait","htmlFor","type","id","required","value","onChange","target","onClick","sort","reverse","map","index","key","style","textAlign","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fbf9be3c.chunk.js","sourcesContent":["import { ethers } from \"ethers\";\nimport WAVE_CONTRACT from \"./wavePortal.json\";\nimport { CONTRACT_ADDRESS } from \"./constants\";\n\nexport const getWaveContract = () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const contract = new ethers.Contract(\n    CONTRACT_ADDRESS,\n    WAVE_CONTRACT.abi,\n    signer\n  );\n  return contract;\n};\n","export const CONTRACT_ADDRESS = \"0x203eD24eA56606be54cC5449D661b21946C52187\";\n","export const checkIfWalletIsConnected = (setCurrentAccount) => {\n  return new Promise((resolve, reject) => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      reject(\"no metamask!\");\n    }\n\n    ethereum\n      .request({ method: \"eth_accounts\" })\n      .then((accounts) => {\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          setCurrentAccount(account);\n          resolve(account);\n        } else {\n          reject(\"no ethereum account access\");\n        }\n      })\n      .catch((err) => {\n        reject(\"error with ethereum request\");\n      });\n  });\n};\n\nexport const connectWallet = (setCurrentAccount) => {\n  const { ethereum } = window;\n  if (!ethereum) {\n    alert(\"Get metamask!\");\n  }\n\n  ethereum\n    .request({ method: \"eth_requestAccounts\" })\n    .then((accounts) => {\n      if (accounts.length !== 0) {\n        console.log(\"Connected\", accounts[0]);\n        setCurrentAccount(accounts[0]);\n      }\n    })\n    .catch((err) => console.log(err));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { getWaveContract } from \"./util/waveContract\";\nimport { checkIfWalletIsConnected, connectWallet } from \"./util/wallet\";\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [currAccount, setCurrentAccount] = useState(\"\");\n  const [totalWaves, setTotalWaves] = useState(\"\");\n  const [waveTxn, setWaveTxn] = useState(null);\n  const [waveMessages, setWaveMessages] = useState([]);\n  const [pendingTxn, setPendingTxn] = useState(false);\n  const [waveText, setWaveText] = useState(\"\");\n\n  const updateWavesMessages = async (contract) => {\n    const waves = await contract.getAllWaves();\n\n    const wavesCleaned = [];\n    waves.forEach((wave) => {\n      wavesCleaned.push({\n        address: wave.waver,\n        timestamp: new Date(wave.timestamp * 1000),\n        message: wave.message,\n      });\n    });\n\n    setWaveMessages(wavesCleaned);\n  };\n\n  const getWaveMessages = useCallback(async () => {\n    const contract = getWaveContract();\n    await updateWavesMessages(contract);\n  }, []);\n\n  const updateWaves = async (wavePortalContract) => {\n    const count = await wavePortalContract.getTotalWaves();\n    setTotalWaves(count.toNumber());\n  };\n\n  const getTotalWaves = useCallback(async () => {\n    const contract = getWaveContract();\n    await updateWaves(contract);\n  }, []);\n\n  const wave = async (message) => {\n    const contract = getWaveContract();\n\n    const waveTxn = await contract.wave(message);\n    setPendingTxn(true);\n    setWaveTxn(waveTxn.hash);\n\n    await waveTxn.wait();\n    setPendingTxn(false);\n\n    await updateWaves(contract);\n    await updateWavesMessages(contract);\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    if (!pendingTxn) {\n      wave(waveText);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected(setCurrentAccount).then((_) => {\n      getTotalWaves();\n      getWaveMessages();\n    });\n  }, [getTotalWaves, getWaveMessages]);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"wave\">\n            👋\n          </span>{\" \"}\n          Basic wave smart contract\n        </div>\n\n        <div className=\"bio\">\n          Total waves on the contract{totalWaves ? `: ${totalWaves}` : \"...\"}\n        </div>\n\n        {waveTxn && (\n          <div className=\"loadingContainer\">\n            {pendingTxn && (\n              <>\n                <FadeLoader size={50} />\n                <div className=\"bio\">Pending transaction... {waveTxn}</div>\n              </>\n            )}\n            {!pendingTxn && (\n              <div className=\"bio\">Wave transaction: {waveTxn}</div>\n            )}\n          </div>\n        )}\n\n        <form onSubmit={handleFormSubmit} className=\"form-block\">\n          <label htmlFor=\"wave-message\">\n            Message:\n            <input\n              type=\"text\"\n              id=\"wave-message\"\n              required\n              value={waveText}\n              onChange={(event) => setWaveText(event.target.value)}\n            />\n          </label>\n          <input type=\"submit\" className=\"waveButton\" value=\"Wave at Me\" />\n        </form>\n\n        {!currAccount && (\n          <button\n            className=\"waveButton\"\n            onClick={() => connectWallet(setCurrentAccount)}\n          >\n            Connect Wallet\n          </button>\n        )}\n\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"wave\">\n            🌊\n          </span>{\" \"}\n          The history of waves\n        </div>\n        {waveMessages\n          .sort()\n          .reverse()\n          .map((wave, index) => {\n            return (\n              <div\n                className=\"bio\"\n                key={wave.address + index}\n                style={{ textAlign: \"center\" }}\n              >\n                {wave.message} from {wave.address} on{\" \"}\n                {wave.timestamp.getDate() +\n                  \"/\" +\n                  (wave.timestamp.getMonth() + 1) +\n                  \"/\" +\n                  wave.timestamp.getFullYear() +\n                  \" \" +\n                  wave.timestamp.getHours() +\n                  \":\" +\n                  wave.timestamp.getMinutes() +\n                  \":\" +\n                  wave.timestamp.getSeconds()}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}